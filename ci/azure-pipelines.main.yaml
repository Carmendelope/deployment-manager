variables: 
  - template: variables/global.yaml@ci_templates
  - template: variables/go.yaml@ci_templates
  - template: variables/k8s.yaml@ci_templates
  - template: variables/git.yaml@ci_templates

resources:
  repositories:
    - repository: ci_templates
      type: github
      name: nalej/ci-templates
      endpoint: nalej
      ref: refs/tags/v1.0.6

stages:
- stage: 'SlackStart'
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'    
    steps:
    - template: slack/build/start.yaml@ci_templates
      parameters:
        author: $(authorName)
        repository: $(Build.Repository.Name)
        branch: $(Build.SourceBranch)
        commit: $(Build.SourceVersionMessage)
        buildUrl: $(buildUrl)$(Build.BuildId)
        slackWebhook: $(slackBuilds)

# - stage: 'BinaryBuild'
#   dependsOn: 'SlackStart'
#   jobs:
#   - job: 
#     pool:
#       vmImage: 'ubuntu-latest'  
#     steps:
#     - template: misc/nalej-component.yaml@ci_templates 
#     - template: steps/go-main.yaml@ci_templates

# - stage: 'CLIPublish'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   dependsOn: 'BinaryBuild'
#   jobs:
#   - job: 
#     pool:
#       vmImage: 'ubuntu-latest'  
#     steps:
#     - template: misc/nalej-component.yaml@ci_templates 
#     - template: steps/cli-publish-main.yaml@ci_templates

# - stage: 'ImageBuild'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   dependsOn: 'CLIPublish'
#   jobs:
#   - job: 
#     pool:
#       vmImage: 'ubuntu-latest'  
#     steps:
#     - template: misc/nalej-component.yaml@ci_templates 
#     - template: steps/docker-main.yaml@ci_templates

- stage: 'ComponentDeploy'
  #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #dependsOn: 'ImageBuild'
  dependsOn: 'SlackStart'
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'  
    steps:
    - template: misc/nalej-component.yaml@ci_templates

    - template: k8s/yaml/render.yaml@ci_templates
      parameters:
        namespace: "__NPH_NAMESPACE"
        componentList: $(componentList)
        environment: "staging"
        version: edge

    - script: |  
        mkdir -p assets/installer/mngtcluster
        az storage blob download-batch -d . -s "edge" --pattern assets/installer/mngtcluster/cluster-api*.yaml --account-name $(accountname) --account-key $(accountkey)        
        echo $(ls)
        echo $(ls assets/installer/mngtcluster)
        mkdir -p dist/yaml/staging/mngtcluster
        cd dist/yaml/staging/mngtcluster
        echo $(pwd)
        mv /home/vsts/work/1/s/assets/installer/mngtcluster/cluster-api*.yaml /home/vsts/work/1/s/dist/yaml/staging/mngtcluster/
        echo $(ls)
        cd /home/vsts/work/1/s/
      displayName: "Download Cluster API assets"

    - template: k8s/yaml/download-cdr.yaml@ci_templates
      parameters:
        yamlPath: dist/yaml/staging
        kubeconfig: $(kubeconfig)

    #This is for cluster api
    #- template: k8s/secrets/authx-secret.yaml@ci_templates

    - template: k8s/secrets/cluster-user-credentials.yaml@ci_templates

    - template: k8s/configmaps/cluster-config.yaml@ci_templates

    - template: k8s/yaml/namespace.yaml@ci_templates
      parameters:
        namespace: $(namespace)
        yamlPath: dist/yaml/staging

    - script: |
        cd /home/vsts/work/1/s/dist/yaml/staging/mngtcluster/
        for file in *.yaml; do
          sed -i -e "s/nalej/$(namespace)/g" $file && 
        done
      displayName: "render namespace"

    - task: DownloadSecureFile@1
      name: ci_kubeconfig
      inputs:
        secureFile: ci_kubeconfig.yaml
      displayName: "Get K8S configuration file"

    - template: k8s/ns/create.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        namespace: $(namespace)

    #This is for cluster-api
    - template: certificates/letsencrypt/mngt-ca-cert.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        namespace: $(namespace)

    - template: certificates/letsencrypt/ca-certificate.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        namespace: $(namespace)

    - template: certificates/letsencrypt/tls-client-certificate.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        namespace: $(namespace)

    - script: |
        echo $(ls)
        echo $(ls dist/yaml/staging/)
        echo $(ls dist/yaml/staging/mngtcluster)
        echo $(ls dist/yaml/staging/appcluster)
      displayName: "showing folders"

    - template: k8s/resources/create.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        platform: mngtcluster
        environment: "staging"

    - template: k8s/resources/create.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        platform: appcluster
        environment: "staging"

    - template: templates/verify_deploy.yaml
      parameters:
        kubeconfig: $(kubeconfig)
        namespace: $(namespace)

    - template: k8s/custom/delete-clusterrolebinding.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        component: "deployment-manager"

    - template: k8s/custom/delete-cdr-main.yaml@ci_templates

    - template: k8s/ns/delete.yaml@ci_templates
      parameters:
        kubeconfig: $(kubeconfig)
        namespace: $(namespace)

# - stage: 'AssetPublish'
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   dependsOn: 'ImageBuild'
#   jobs:
#   - job: 
#     pool:
#       vmImage: 'ubuntu-latest'  
#     steps:
#     - template: misc/nalej-component.yaml@ci_templates
#     - template: steps/assets-main.yaml@ci_templates

- stage: 'SlackFinish'
  condition: always()
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'  
    steps: 
    - template: steps/slack-finish-main.yaml@ci_templates